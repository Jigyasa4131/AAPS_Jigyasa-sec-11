import java.util.*;

public class FoodRatings {
    // Food object stored in TreeSet and map
    private static class Food implements Comparable<Food> {
        String name;
        int rating;
        String cuisine;

        Food(String name, int rating, String cuisine) {
            this.name = name;
            this.rating = rating;
            this.cuisine = cuisine;
        }

        // order: higher rating first, tie -> lexicographically smaller name
        @Override
        public int compareTo(Food o) {
            if (this.rating != o.rating) return Integer.compare(o.rating, this.rating);
            return this.name.compareTo(o.name);
        }
    }

    // cuisine -> sorted set of Foods
    private final Map<String, TreeSet<Food>> cuisineToSet;
    // foodName -> Food object
    private final Map<String, Food> foodMap;

    public FoodRatings(String[] foods, String[] cuisines, int[] ratings) {
        cuisineToSet = new HashMap<>();
        foodMap = new HashMap<>();

        for (int i = 0; i < foods.length; i++) {
            Food f = new Food(foods[i], ratings[i], cuisines[i]);
            foodMap.put(foods[i], f);
            cuisineToSet.computeIfAbsent(cuisines[i], k -> new TreeSet<>()).add(f);
        }
    }

    public void changeRating(String food, int newRating) {
        Food f = foodMap.get(food);
        TreeSet<Food> set = cuisineToSet.get(f.cuisine);
        // remove the object before changing rating (important)
        set.remove(f);
        f.rating = newRating;
        set.add(f);
    }

    public String highestRated(String cuisine) {
        TreeSet<Food> set = cuisineToSet.get(cuisine);
        // first() returns the highest by our comparator
        return set.first().name;
    }
}
