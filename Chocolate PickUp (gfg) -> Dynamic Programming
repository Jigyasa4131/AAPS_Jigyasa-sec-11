import java.util.Arrays;
public class ChocolatePickup {
    static int[][][]dp;

    public static int maxChocolate(int[][] grid){
        int r = grid.length;
        int c = grid[0].length;
        dp = new int[r][r][c];

        for(int [][] row : dp){
            for(int [] d : row){
                Arrays.fill(d, -1);
            }
        }
        return solve(0, 0, c - 1, grid);
    }
    private static int solve(int i, int j1, int j2, int[][] grid){
        int r = grid.length;
        int c = grid[0].length;

        //Out of Bound Condition
        if(j1 < 0 || j2 < 0 || j1 >= c || j2 >= c ){
            return Integer.MIN_VALUE;
        }
        // Base cases : Last row

        if(i == r - 1){
            if( j1 == j2){
                return grid[i][j1];
            }
            return grid[i][j1] + grid[i][j2];
        }

        // memoization case 
        if(dp[i][j1][j2] != -1){
            return dp[i][j1][j2];
        }
        int max = Integer.MIN_VALUE;
        for(int d1 = -1; d1 <= 1; d1 ++){
            for(int d2 = -1; d2 <= 1;d2++){
                int value = (j1 == j2) ? grid[i][j1] : grid[i][j1] + grid[i][j2];
                value += solve(i + 1, j1 + d1, j2 + d2, grid);
                max = Math.max(max, value);

            }
        }
        return dp[i][j1][j2] = max ;
    }
    public static void main(String[] args) {
        int[][] matrix = {
            {3, 1, 1},
            {2, 5, 1},
            {1, 5, 5},
            {2, 1, 1}
        };
        int result = maxChocolate(matrix);
        System.out.println("Maximum chocolates: " + result );
    }
}
