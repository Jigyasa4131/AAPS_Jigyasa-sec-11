import java.util.*;

public class TaskManager {
    // Map from taskId -> [userId, priority]
    private Map<Integer, Task> taskMap;
    // TreeSet ordered by priority desc, then taskId desc
    private TreeSet<Task> taskSet;

    // helper class
    private static class Task {
        int userId;
        int taskId;
        int priority;
        public Task(int userId, int taskId, int priority) {
            this.userId = userId;
            this.taskId = taskId;
            this.priority = priority;
        }
    }

    public TaskManager(List<List<Integer>> tasks) {
        taskMap = new HashMap<>();
        taskSet = new TreeSet<>(new Comparator<Task>() {
            @Override
            public int compare(Task a, Task b) {
                if (a.priority != b.priority) {
                    return Integer.compare(b.priority, a.priority); // higher priority first
                }
                // if priority equal, taskId higher first
                return Integer.compare(b.taskId, a.taskId);
            }
        });
        for (List<Integer> t : tasks) {
            int userId = t.get(0);
            int taskId = t.get(1);
            int priority = t.get(2);
            add(userId, taskId, priority);
        }
    }

    public void add(int userId, int taskId, int priority) {
        Task task = new Task(userId, taskId, priority);
        taskMap.put(taskId, task);
        taskSet.add(task);
    }

    public void edit(int taskId, int newPriority) {
        Task old = taskMap.get(taskId);
        if (old == null) {
            // according to problem spec, this shouldn't happen
            return;
        }
        // remove old entry from set
        taskSet.remove(old);
        // create updated task
        Task updated = new Task(old.userId, taskId, newPriority);
        taskMap.put(taskId, updated);
        taskSet.add(updated);
    }

    public void rmv(int taskId) {
        Task old = taskMap.get(taskId);
        if (old == null) {
            return;
        }
        taskSet.remove(old);
        taskMap.remove(taskId);
    }

    public int execTop() {
        if (taskSet.isEmpty()) {
            return -1;
        }
        Task top = taskSet.first();  // TreeSet.first gives the “lowest” according to comparator; since comparator is reversed we need .first()
        taskSet.remove(top);
        taskMap.remove(top.taskId);
        return top.userId;
    }
}
