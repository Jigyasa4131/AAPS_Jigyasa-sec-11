class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();

        int[][] dp = new int[n + 1][m + 1];

        // Base cases: transforming from or to an empty string
        for (int i = 0; i <= n; i++)
            dp[i][0] = i; // deletion
        for (int j = 0; j <= m; j++)
            dp[0][j] = j; // insertion

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    // If characters match, no operation needed
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    // Minimum of insert, delete, or replace
                    dp[i][j] = 1 + Math.min(
                        Math.min(dp[i - 1][j],     // delete
                                 dp[i][j - 1]),    // insert
                                 dp[i - 1][j - 1]  // replace
                    );
                }
            }
        }

        return dp[n][m]; // Minimum edit distance
    }
}
