class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<List<Integer>> res = new HashSet<>();
        ways(nums , res, 0);
        return new ArrayList<>(res);
    }
    public static void ways(int arr[] , Set<List<Integer>> res, int index){
        if( index == arr.length){
            List<Integer> temp = new ArrayList<>();
            for(int num : arr){
                temp.add(num);
            }
            res.add(temp);
            return ;
        }
        
        for(int i = index; i<arr.length; i++){
            swap(arr, index , i); // recursion
            ways(arr ,res ,index+1);
            swap(arr , index , i);
        }
    }
    
    public static void swap(int [] arr , int a, int b){
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }
}
